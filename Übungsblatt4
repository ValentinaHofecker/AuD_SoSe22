class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None
        self.size = 0

    def append(self, data):
        node = Node(data)

        if self.head == None:
            self.head = node
        else:
            current = self.head
            while current.next != None:
                current = current.next
            current.next = node
        self.size += 1

    def __iter__(self):
        current = self.head
        while current:
            val = current.data
            current = current.next
            yield val

    def get_size(self):
        return self.size
    
    # Exercise 1
    def clear(self):
        while (self.head != None):
            current = self.head
            self.head = self.head.next
            current = None
        self.size = 0

    # Exercise 2
    def get_data(self, data):
        current = self.head
        while (current != None):
            if (current.data == data):
                return current.data
            else:
                current = current.next
        return False

    # Exercise 3 
    def delete(self, data):
        previous_node = None
        current = self.head
        while (current != None):
            if (current.data == data):
                # data to be deleted is not in head, as previous_node is not None
                if (previous_node != None):
                    previous_node.next = current.next
                    current = None
                    self.size -= 1
                # data to be deleted is in head
                else:
                    self.head = current.next
                    current = None
                    self.size -= 1
            else:
                previous_node = current
                current = current.next

# Exercise 4
class NodeDLL:
    def __init__(self, data=None):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.size = 0

    def append(self, data):
        node = NodeDLL(data)
        if (self.head == None):
            self.head = node
            return
        current = self.head
        while (current.next != None):
            current = current.next
        current.next = node
        node.prev = current
        self.size += 1

    def __iter__(self):
        current = self.head
        while current:
            val = current.data
            current = current.next
            yield val

    def get_size(self):
        return self.size
    
    def clear(self):
        while (self.head != None):
            current = self.head
            self.head = self.head.next
            current = None
        self.size = 0

    def get_data(self, data):
        current = self.head
        while (current != None):
            if (current.data == data):
                return current.data
            else:
                current = current.next
        return False

    def delete(self, data):
        current = self.head
        # return if no element in list
        if (current == None):
            return
        # O(1) runtime if data is in head or tail
        if (current == data):
            delete_node = self.head
            self.head = self.head.next
            delete_node = None
            if (self.head != None):
                self.head.prev = None
            size -= 1
        elif (current.prev == data):
            self.head.prev = None
            size -= 1
        else:
            while (current.next != None):
                if (current.next.data == data):
                    delete_node = current.next
                    current.next = current.next.next
                    if (current.next != None):
                        current.next.prev = current
                    delete_node = None
                    size -= 1
                    break
                current = current.next

double_list = DoublyLinkedList()
double_list.append(1)
double_list.append(2)
double_list.append(3)
double_list.append(4)
double_list.append(5)
print(double_list.get_data(5))

# Exercise 5
class MyStack:

    def __init__(self):
        self.stack_list = []

    def push(self, element):
        self.stack_list.append(element)

    def pop(self):
        if self.stack_list:
            return self.stack_list.pop()

    def top(self):
        return self.stack_list[-1]

    def size(self):
        return int(len(self.stack_list))

stack = MyStack()
stack.push(1)
stack.push(2)
stack.push(3)
stack.push(4)
print(stack.size())
print(stack.top())
print(stack.pop())
print(stack.pop())
print(stack.size())

# Exercise 6
class MyQueue:

    def __init__(self):
        self.queue_list = []

    def push(self,element):
        self.queue_list.append(element)

    def pop(self):
        if self.queue_list:
            return self.queue_list.pop()

    def show_left(self):
        return self.queue_list[0]

    def show_right(self):
        return self.queue_list[-1]

    def size(self):
        return int(len(self.queue_list))

test_queue = MyQueue()
print(test_queue.pop())
test_queue.push(1)
test_queue.push(2)
test_queue.push(3)
test_queue.push(4)
print(test_queue.size())
print(test_queue.pop())
print(test_queue.size())
print(test_queue.show_left())
print(test_queue.show_right())
